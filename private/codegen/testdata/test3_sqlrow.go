// Code generated by "sqlrow-gen"; DO NOT EDIT

package testdata

import (
	"github.com/jjeffery/errors"
	"github.com/jjeffery/sqlrow/private/codegen/testdata/rowtype"
)

// selectRows returns a list of Row3s from an SQL query.
func (q *Row3Query) selectRows(query string, args ...interface{}) ([]*rowtype.Row3, error) {
	var rows []*rowtype.Row3
	_, err := q.schema.Select(q.db, &rows, query, args...)
	if err != nil {
		return nil, errors.Wrap(err, "cannot query Row3s").With(
			"query", query,
			"args", args,
		)
	}
	return rows, nil
}

// selectOne selects a Row3 from an SQL query. Returns nil if the query returns no rows.
// If the query returns one or more rows the value for the first is returned and any subsequent
// rows are discarded.
func (q *Row3Query) selectOne(query string, args ...interface{}) (*rowtype.Row3, error) {
	var row rowtype.Row3
	n, err := q.schema.Select(q.db, &row, query, args...)
	if err != nil {
		return nil, errors.Wrap(err, "cannot query one Row3").With(
			"query", query,
			"args", args,
		)
	}
	if n == 0 {
		return nil, nil
	}
	return &row, nil
}
