// Code generated by "sqlrow-gen"; DO NOT EDIT

package testdata

import (
	"github.com/jjeffery/errors"
)

// Get a document by its primary key. Returns nil if not found.
func (q Row0Query) Get(id string) (*Row0, error) {
	var row Row0
	n, err := q.schema.Select(q.db, &row, "xyz.rows", id)
	if err != nil {
		return nil, errors.Wrap(err, "cannot get document").With(
			"id", id,
		)
	}
	if n == 0 {
		return nil, nil
	}
	return &row, nil
}

// Select a list of documents from an SQL query.
func (q Row0Query) Select(query string, args ...interface{}) ([]*Row0, error) {
	var rows []*Row0
	_, err := q.schema.Select(q.db, &rows, query, args...)
	if err != nil {
		return nil, errors.Wrap(err, "cannot query documents").With(
			"query", query,
			"args", args,
		)
	}
	return rows, nil
}

// Select a document from an SQL query. Returns nil if the query returns no rows.
// If the query returns one or more rows the value for the first is returned and any subsequent
// rows are discarded.
func (q Row0Query) SelectOne(query string, args ...interface{}) (*Row0, error) {
	var row Row0
	n, err := q.schema.Select(q.db, &row, query, args...)
	if err != nil {
		return nil, errors.Wrap(err, "cannot query one document").With(
			"query", query,
			"args", args,
		)
	}
	if n == 0 {
		return nil, nil
	}
	return &row, nil
}

// Insert a document row.
func (q Row0Query) Insert(row *Row0) error {
	err := q.schema.Insert(q.db, row, "xyz.rows")
	if err != nil {
		return errors.Wrap(err, "cannot insert document").With(
			"ID", row.ID, "Name", row.Name,
		)
	}
	return nil
}

// Update an existing document row. Returns the number of rows updated,
// which should be zero or one.
func (q Row0Query) Update(row *Row0) (int, error) {
	n, err := q.schema.Update(q.db, row, "xyz.rows")
	if err != nil {
		return 0, errors.Wrap(err, "cannot update document").With(
			"ID", row.ID, "Name", row.Name,
		)
	}
	return n, nil
}

// Attempt to update a document row, and if it does not exist then insert it.
func (q Row0Query) Upsert(row *Row0) error {
	n, err := q.schema.Update(q.db, row, "xyz.rows")
	if err != nil {
		return errors.Wrap(err, "cannot update document for upsert").With(
			"ID", row.ID, "Name", row.Name,
		)
	}
	if n > 0 {
		// update successful, row updated
		return nil
	}
	if err := q.schema.Insert(q.db, row, "xyz.rows"); err != nil {
		return errors.Wrap(err, "cannot insert document for upsert").With(
			"ID", row.ID, "Name", row.Name,
		)
	}
	return nil
}

// Delete a document row. Returns the number of rows deleted, which should
// be zero or one.
func (q Row0Query) Delete(row *Row0) (int, error) {
	n, err := q.schema.Delete(q.db, row, "xyz.rows")
	if err != nil {
		return 0, errors.Wrap(err, "cannot delete document").With(
			"ID", row.ID, "Name", row.Name,
		)
	}
	return n, nil
}
