package gen

import "html/template"

// DefaultTemplate is the template used by default for generating code.
var DefaultTemplate = template.Must(template.New("defaultTemplate").Parse(`// Code generated by "{{.CommandLine}}"; DO NOT EDIT

package {{.Package}}

import ({{range .Imports}}
    {{.}}{{end}} 
    "github.com/jjeffery/sqlrow"
)
{{range .QueryTypes -}}
{{- if .Method.Get}}
func (q {{.TypeName}}) Get({{.RowType.IDParams}}) (*{{.RowType.Name}}, error) {
	var row {{.RowType.Name}}
	n, err := q.schema.Select(q.db, &row, {{.QuotedTableName}}, {{.RowType.IDArgs}})
	if err != nil {
		return nil, errors.Wrap(err, "cannot get {{.Singular}}").With(
			{{.RowType.Keyvals}}
		)
	}
	if n == 0 {
		return nil, nil
	}
	return &row, nil
}
{{end -}}
{{- if .Method.Select}}
func (q {{.TypeName}}) Select(query string, args ...interface{}) ([]*{{.RowType.Name}}, error) {
	var rows []*{{.RowType.Name}}
	_, err := q.schema.Select(q.db, &rows, query, args...)
	if err != nil {
		return nil, errors.Wrap(err, "cannot query {{.Plural}}").With(
			"query", query,
			"args", args,
		)
	}
	return rows, nil
}
{{end -}}
{{- if .Method.SelectOne}}
func (q {{.TypeName}}) SelectOne(query string, args ...interface{}) (*{{.RowType.Name}}, error) {
	var row {{.RowType.Name}}
	n, err := q.schema.Select(q.db, &row, query, args...)
	if err != nil {
		return nil, errors.Wrap(err, "cannot query one {{.Singular}}").With(
			"query", query,
			"args", args,
		)
	}
	if n == 0 {
		return nil, nil
	}
	return &row, nil
}
{{end -}}
{{- if .Method.Insert}}
func (q {{.TypeName}}) Insert(row *{{.RowType.Name}}) error {
	err := q.schema.Insert(q.db, row, {{.QuotedTableName}})
	if err != nil {
		return errors.Wrap(err, "cannot insert {{.Singular}}").With(
            {{.RowType.Keyvals}}
		)
	}
	return nil
}
{{end -}}
{{- if .Method.Update}}
func (q {{.TypeName}}) Update(row *{{.RowType.Name}}) (int, error) {
	n, err := q.schema.Update(q.db, row, {{.QuotedTableName}})
	if err != nil {
		return 0, errors.Wrap(err, "cannot update {{.Singular}}").With(
            {{.RowType.Keyvals}}
		)
	}
	return n, nil
}
{{end -}}
{{-if .Method.Upsert}}
func (q {{.TypeName}}) Upsert(row *{{.RowType.Name}}) error {
	n, err := q.schema.Update(q.db, row, {{.QuotedTableName}})
    if err != nil {
		return 0, errors.Wrap(err, "cannot update {{.Singular}} for upsert").With(
            {{.RowType.Keyvals}}
    }
    if n > 0 {
        // update successful, row updated
        return nil
    }
	err := q.schema.Insert(q.db, row, {{.QuotedTableName}})
	if err != nil {
		return errors.Wrap(err, "cannot insert {{.Singular}} for upsert").With(
            {{.RowType.Keyvals}}
		)
	}
	return nil
}
{{end -}}
{{- if .Method.Delete}}
func (q {{.TypeName}}) Delete(row *{{.RowType.Name}}) (int, error) {
	n, err := q.schema.Delete(q.db, row, {{.QuotedTableName}})
	if err != nil {
		return 0, errors.Wrap(err, "cannot delete {{.Singular}}").With(
            {{.RowType.Keyvals}}
		)
	}
	return n, nil
}
{{end -}}
{{- end}}`))
